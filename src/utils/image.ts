import { createCanvas } from 'canvas';
import * as fs from 'fs';
import * as path from 'path';
import { ImageGenerationParams } from '../interfaces/interface';



/**
 * Generate summary image with country statistics
 */
export const generateSummaryImage = async (params: ImageGenerationParams): Promise<string> => {
    const { totalCountries, topCountries, timestamp, cacheDir } = params;
    
    try {
        // Create canvas
        const canvasWidth = 800;
        const canvasHeight = 600;
        const canvas = createCanvas(canvasWidth, canvasHeight);
        const ctx = canvas.getContext('2d');

        // Background gradient
        const gradient = ctx.createLinearGradient(0, 0, canvasWidth, canvasHeight);
        gradient.addColorStop(0, '#1e3a8a');
        gradient.addColorStop(1, '#1e40af');
        ctx.fillStyle = gradient;
        ctx.fillRect(0, 0, canvasWidth, canvasHeight);

        // Title
        ctx.fillStyle = '#ffffff';
        ctx.font = 'bold 32px Arial';
        ctx.textAlign = 'center';
        ctx.fillText('Country Data Summary', canvasWidth / 2, 60);

        // Total countries
        ctx.font = '24px Arial';
        ctx.fillText(`Total Countries: ${totalCountries}`, canvasWidth / 2, 110);

        // Last refresh timestamp
        ctx.font = '16px Arial';
        ctx.fillText(`Last Refreshed: ${timestamp.toLocaleString()}`, canvasWidth / 2, 140);

        // Top 5 GDP countries header
        ctx.font = 'bold 20px Arial';
        ctx.fillText('Top 5 Countries by Estimated GDP', canvasWidth / 2, 190);

        // Table headers
        ctx.font = 'bold 16px Arial';
        ctx.textAlign = 'left';
        ctx.fillText('Country', 100, 230);
        ctx.textAlign = 'right';
        ctx.fillText('GDP (USD)', 700, 230);

        // Draw line
        ctx.strokeStyle = '#ffffff';
        ctx.lineWidth = 1;
        ctx.beginPath();
        ctx.moveTo(100, 240);
        ctx.lineTo(700, 240);
        ctx.stroke();

        // Country data
        ctx.textAlign = 'left';
        ctx.font = '16px Arial';
        topCountries.forEach((country, index) => {
            const yPos = 270 + (index * 40);
            
            // Country name
            ctx.fillStyle = '#ffffff';
            ctx.fillText(country.name, 100, yPos);
            
            // GDP value (formatted)
            const gdp = country.estimated_gdp ? country.estimated_gdp : 0;
            const formattedGDP = gdp.toLocaleString('en-US', {
                style: 'currency',
                currency: 'USD',
                minimumFractionDigits: 0,
                maximumFractionDigits: 0
            });
            
            ctx.textAlign = 'right';
            ctx.fillText(formattedGDP, 700, yPos);
            
            // Population (smaller text)
            ctx.textAlign = 'left';
            ctx.font = '12px Arial';
            ctx.fillStyle = '#d1d5db';
            ctx.fillText(`Pop: ${country.population.toLocaleString()}`, 100, yPos + 15);
            ctx.font = '16px Arial';
        });

        // Footer
        ctx.textAlign = 'center';
        ctx.font = '14px Arial';
        ctx.fillStyle = '#9ca3af';
        ctx.fillText('Generated by Country Currency & Exchange API', canvasWidth / 2, canvasHeight - 30);

        // Save image
        const buffer = canvas.toBuffer('image/png');
        const imagePath = path.join(cacheDir, 'summary.png');
        fs.writeFileSync(imagePath, buffer);

        return imagePath;
    } catch (error) {
        console.error('Error generating summary image:', error);
        throw new Error('Failed to generate summary image');
    }
};